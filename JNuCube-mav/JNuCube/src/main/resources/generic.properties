####################################################################
##               JNeuCube PROPERTIES TEMPLATE V 1.0               ##
####################################################################
## Updates
## Date: 02/08/2019
## Section: ENCODING ALGORITHM
## Variable: Addition of the Threshold Base Representation algorithm## 
## Date: 13/05/2019
## Section: SPATIO TEMPORAL DATA PROPERTIES
## Variable: Addition of the stdTargetClassLabelFile 
## Date: 25/03/2019                                         
## Section: SPATIO TEMPORAL DATA PROPERTIES
## Variable: Addition of the stdDataSource variable (not available, 
## development in progress)

## Key: projectName
## Description: Set the name of the project.
## Values: String
projectName=MyJNeuCubeProject
## Key: problemType
## Description: The type of machine learning task.
## Values: CLASSIFICATION, REGRESSION
problemType = CLASSIFICATION

####################################################################
##                   CLOUD COMPUTING PROPERTIES                   ##
####################################################################
## Key: accountName
## Description:  Account name for your Access Keys.
## Values: String
accountName=
## Key: accountKey
## Description: Account key for your Access Keys.
## Values: String
accountKey=
## Key: containerName
## Description: Container name you want to uploadFromFile or create
## Values: String
containerName=
## Key: dataFolder
## Description: The folder in the container where the spatio-temporal
## data is stored
## Values: String
dataFolder=
## Key: uploadFolder
## Description: The folder in the container to upload file generated 
## from the JNeuCube
## Values: String
uploadFolder=

####################################################################
##                 SPATIO TEMPORAL DATA PROPERTIES                ##
####################################################################
## Key: stdOffLine
## Description: The type of loading process. For offline (true), or 
## online (false).
## Values: true, false
stdOffLine=true
## Key: stdDirectory
## Description: If the process is offline this variable indicates the 
## directory where the data is stored. All the sample files must be
## a comma delimited CSV files.
stdDirectory=C:\\DataSets\\ad_sample_excess\\
## Key: stdVariables
## Description: Set the number of variables for the problem. The value 
## must be the same as the value of the numVariables property described
## in the NETWORK VARIABLES section. In most of the cases 1 e.g EEG, 
## seismic data, wrist movement. For multivariate projects more than 2
## e.g. pollution, wind energy, forecasting.
## Values: [1,10]
stdVariables=1
## Key: stdIsEncodedData
## Description: Indicates whether the data has been previosly encoded 
## into spike trains or not.
## values: true, false
stdIsEncodedData=false
## Key: stdDataSource (not available)
## Description: Defines the source of the data. For large data sets it
## is recommended to set this parameter to DISK. Then, the system will 
## read the data one by one from the disk during the data propagation 
## (training or validation). The process will be slower than setting 
## this parameter to MEMORY.
## values: MEMORY, DISK
## stdDataSource=MEMORY
## Key: trainingRate
## Description: The rate of data selected from the whole dataset that
# will be used for training in the cross-validation process. 
## Value: [0.0 1.0], recommended value 0.7
rateForTraining=0.7
## Key: stdTargetClassLabelFile
## Description: Set the name of the file that contains the labels of the
## samples. It is a vector of n elements, where n is the number of samples.
## The position of the label should correspond to the sample file name, i.e.
## the first row should be the class label for the sample file sam1.csv,
## the second for the sam2.csv and so on. If this variable is empty or 
## commented, the program will consider the first file that matches with
## the prefix tar_class in the directory indicated in stdDirectorythe variable
## as the file that contains the target class labels. 
## Value: a coma delimeted CSV file
stdTargetClassLabelFile

## Set the online Learning Job variables. 
## Key: jobInterval
## Description:
## Value:
jobInterval
## Key: maxBufferSize
## Description: In an online process, it determines the number of samples
## to keep in the buffer before processing the data.
## Value: [1,10]
maxBufferSize = 4

## Key: onlineReader
## Description: Set the type of an online reader 
## Value: ONLINE_SEISMIC_FILE_READER
onlineReader=ONLINE_SEISMIC_FILE_READER
## Key: hourIncrement
## Description: Set the time step specified in hours
## Values: [1,10]
hourIncrement=1
## Key: readerCalendar
## Description: Set the initial timne of the simulation.
## Values: yyyy/mm/dd hh:min:ss 
readerCalendar=2010/01/01 00:00:00
## Key: fileReaderDirectory
## Description: Set the directory of the data for online simulation.
## Values: A comma delimited CSV file.
fileReaderDirectory=C:\\DataSets\\seismic\\seismic_52ch_2010-2013\\

####################################################################
##                       ENCODING ALGORITHM                       ##
####################################################################
## Set the encoding algorithm.
## Key: encodingAlgorithmName
## Description: Set the Encoding algorithm
## Value: AER (Address Event Representation), ONLINE_AER (online AER), 
## BSA (Ben's spiker algorithm), SF (step forward algorithm), 
## TBR (Threshold Base Representation)
encodingAlgorithmName=AER
### Set the AER algorithm properties.
## Key: aerSpikeThresholdValue
## Description: Set the distance between the mean and the standard 
## deviation of temporal data changes.
## Value: (0,1]
aerSpikeThresholdValue=0.5

### Set the ONLINE_AER algorithm variablesAER.
## Key: aerOnlineNumFeatures
## Description: Set the number of features of the samples.
## Value: 
aerOnlineNumFeatures=52
## Key: 
## Description: Set the distance between the mean and the standard 
## deviation of temporal data changes (the same as the 
## spikeThresholdValue in the AER algorithm).
## Value: (0,1]
aerOnlineAlpha=0.5

### Set the BSA algorithm properties
## Key: numFilters
## Description: Set the number of filters to be used. If the numnber 
## of filters is equals to 1 then all the features of the sample 
## will be encoded using the same filter. If the number of filters 
## is greater than 1 then the number of filters must be the same as 
## the number of featrues of the data.
## Value: [1,  ]
numFilters=1
## Key: thresholdVec
## Description: Set the treshold value.
## Value: 
thresholdVec=1.51
## 
## Key: filterOrderVec
## Description: Set the order of the low pass FIR.
## Value: [4, ]
filterOrderVec=29
## Key: filterCutoffVec
## Description: Set the cutoff frequency of the FIR.
## Value: (0,1). If the numFilters key is greater than 1 this 
## parameter allows different values separated by comma. Each value
## can be used by each temporal feature of the data.
filterCutoffVec=0.1255

### Set the Threshold Base Representation (TBR) algorithm properties
## Key: tbrSpikeThresholdValue
## Description: Set the distance between the mean and the standard 
## deviation of temporal data changes.
## Value: (0,1] (the upper limit can be greater than one)
tbrSpikeThresholdValue=0.5
## Key:searchOptimalThreshold
## Desciption: Allows to find the best threshold for each temporal
## variable. 
## Value: {true, false}
searchOptimalThreshold=true

### Set the Step Forward (SF) algorithm properties
## Key: tbrSpikeThresholdValue
## Description: Set the distance between the mean and the standard 
## deviation of temporal data changes.
## Value: (0,1] (the upper limit can be greater than one)
sfSpikeThresholdValue=0.5
## Key:searchOptimalThreshold
## Desciption: Allows to find the best threshold for each temporal
## variable. 
## Value: {true, false}
searchOptimalThreshold=true

####################################################################
##                    SPIKING NEURON PROPERTIES                   ##
####################################################################
## Key: snType
## Description: Set the type of neurons that the spiking neural can
## process. If the values is set to EXCITATORY, the connection weights
## can be positive or negative values. On the other hand, if the value
## is set to INHIBITORY then the connection weights must be w>0.
## Values: EXCITATORY, INHIBITORY
snType=EXCITATORY
## Key: snTypeDelay
## Description: Set the type of delay FIXED (all the synapses have the
## same delay), RANDOM the delay is different for all the synapses)
## Values: FIXED, RANDOM
snTypeDelay=FIXED
## Key: snMaxDelay
## Description: Set the maximum time delay of the neuons for releasing 
## a spike to a postsynaptic neuron. Integer value [1, infinity]. If 
## the type of delay is fixed, then all the neurons will release a 
## spike after the delay specified by this variable.
## Values: [1,10]
snMaxDelay=1

### CORE properties.
## Key: coreName
## Description: Set the type of spiking neuron model to use in the 
## network (LIF (leaky integrate and fire), SLIF (simplified leaky
## integrate and fire), IZHIKEVICH, PROBABILISTIC). The LIF is 
## selected by default.
## Values: LIF, SLIF, IZHIKEVICH, PROBABILISTIC
coreName=LIF
## Key: coreRecordFirings
## Description: Determines whether the ssystem will record the fring
## activity. If this variable is set to true, the process will
## consume more memory than usual.
## Values: true, false
coreRecordFirings=false

### LIF (leaky integrate and fire) properties.
## Key: lifThresholdVoltage
## Description: Set the threshold volatage value to emit a spike.
## Values: [-inf,inf]
lifThresholdVoltage=0.05
## Key: lifResetVoltage
## Description: Set the reset voltage after emitting a spike.
## Values:[-inf,inf]
lifResetVoltage=0.0
## Key: lifThresholdRefractoryTime
## Description: Set the maximum time of the refractory time.
## Values: [1,10]
lifThresholdRefractoryTime=4
## Key: lifResistance
## Description: Set the resistance value.
## Values: > 0
lifResistance=1.0
## Key: lifCapacitance
## Description: Set the capacitance value.
## Values: > 0
lifCapacitance=10.0

### SLIF (simplified leaky integrate and fire) properties. This
## model is utilised in the matlab version of the NeuCube.
## Key: slifThresholdVoltage
## Description: Set the threshold volatage value to emit a spike.
## Values: (0,1]
slifThresholdVoltage = 0.5
## Key: slifResetVoltage
## Description: Set the reset voltage after emitting a spike.
## Values: 0.0
slifResetVoltage = 0.0 
## Key: slifThresholdRefractoryTime
## Description: Set the maximum time of the refractory time.
## Values: [1,10]
slifThresholdRefractoryTime = 6
## Key: slifLeakValue
## Description: Set the leak value. 
## Values: (0, ]
slifLeakValue = 0.002

### Izhikevich variables. 
## Key: izBehaviour
## Description: Set the computational properties of the neuron.
## Values: "ABCDEFGHIJKLMNOPQRSTUVWXY01". A-T Computational 
## properties, U-W excitatory, X-Y inhibitory (from the paper 
## "Simple models of spiking neurons"), 0 inhibitory, 1 excitatory.
izBehaviour=A 

### Set the Probabilistic SN variables
## Key: probThresholdVoltage
## Description: Set the probability of the neuron to emit a spike.
## Values: (0,1]
probThresholdVoltage=1.0
## Key: probResetVoltage
## Description: Set the reset voltage after emitting a spike.
## Values:
probResetVoltage=0.0
## Key: probThresholdRefractoryTime
## Description: Set the maximum time of the refractory time.
## Values: [1,10]
probThresholdRefractoryTime=4
## Key: probResistance
## Description: Set the resistance value.
## Values: > 0
probResistance=1.0
## Key: probCapacitance
## Description: Set the capacitance value.
## Values: > 0
probCapacitance=10.0

####################################################################
##                        NETWORK VARIABLES                       ##
####################################################################
## Key: numVariables
## Description: Set the number of variables for the problem. The 
## value must be the same as the value of the stdVariables property 
## described in the SPATIO TEMPORAL DATA PROPERTIES section. In most
## of the cases 1 e.g EEG, seismic data, wrist movement. For 
## multivariate projects more than 2 e.g. pollution, wind energy, 
## forecasting.
## Values: [1,10]
numVariables=1
## Key: allowInhibitoryInputNeurons
## Description: Set the value true if the network will include 
## negative input neurons that process negative input spikes.
## Value: true, false
allowInhibitoryInputNeurons=true
## Key: mappingMode
## Description: Set the method for creating the neurons of the 
## reservoir from a file or automatically by giving the number of 
## neurons in the X,Y and Z coordinates. 
## Value: AUTO, FILE
mappingMode=AUTO
## For AUTO MODE.
## Key: numNeuronsX, numNeuronsY, numNeuronsZ
## Description: Set the number of neurons in the X,Y and Z 
## coordinates.
## Value: [0, 100]
numNeuronsX=10
numNeuronsY=10
numNeuronsZ=10

## For FILE mode.
## Key: mappingCoordinatesFileName
## Description: Set the csv file that contains the coordinates of 
## each neuron of the reservoir.
## Value: a comma delimited CSV file
mappingCoordinatesFileName=null

## Key: inputMapping
## Description: Set the method for mapping the input variable, i.e. 
## by executing an alfgorithm (ALGORITHM), by reading the coordinates
## from a comma delimite CSV file (FILE), or by giving the dimensions
## (width and height) of an image (IMAGE). Note that the loading data 
## process must be executed before the input mapping.
## Value: ALGORITHM, FILE, IMAGE.
inputMapping=ALGORITHM
## Key: inputMappingAlgorithm
## Description: Set the mapping algorithm for selecting the location
## of the input variables.
## Value: GRAPH_MATCHING, RANDOM_MAPPING
inputMappingAlgorithm=GRAPH_MATCHING
## Key: inputCoordinatesFileName
## Description: Set the csv file that contains the coordinates of 
## input neurons if the type of input mapping is set to FILE.
## Value: a comma delimited CSV file
inputCoordinatesFileName=inputCoordinates.csv
## Key: numInputCoordinatesX
## Description: If the input mapping is set to IMAGE, these parameters
## are used to set the number of neurons in the X (width) and Y (height)
## coordinates of the image. 
## Value: 
numInputCoordinatesX=50
numInputCoordinatesY=70

## Key: reservoirBuilder
## Description: Set the algorithm to build the reservoir neurons, 
## i.e. traditional NeuCube reservoir model (NEUCUBE_RESERVOIR) which 
## creates only EXCITATORY neurons that will contain excitatory 
## synapses with positive and negative values to simulate inhibitory 
## behaviour, or a mix model (MIX_RESERVOIR) which creates EXCITATORY
## neurons that have only excitatory synapses, and INHIBITORY neurons
## that have only inhibitory synapses.
## Value: NEUCUBE_RESERVOIR, MIX_RESERVOIR
reservoirBuilder=NEUCUBE_RESERVOIR

### Set the MIX_RESERVOIR variables
## Key: excitatoryNeuronRate
## Description: Set the number of excitatory neurons in the reservoir. 
## The remianing will be inhibitory neurons.
## Value: (0,1.0]
excitatoryNeuronRate=0.7

####################################################################
##                      CONNECTION ALGORITHM                      ##
####################################################################
## Key: connectionAlgorithmName
## Description: Set the connection algorithm. 
## Value: SMALL_WORLD, SMALL_WORLD_IMAGES, EPUSSS_SMALL_WORLD. The 
## SMALL_WOLRD_IMAGES algorithm uses the same parameters as the 
## SMALL_WORLD algorithm. 
connectionAlgorithmName=SMALL_WORLD
## Key: minWeightValue
## Description: Set the minimum weight value.
## Value: -0.1
minWeightValue=-0.1
## Key: maxWeightValue
## Description: Set the maximum weight value.
## Value: 0.1
maxWeightValue=0.1

### Set the SMALL_WORLD variables. 
## Key: smallWorldRadius
## Description: Set the radius of the nearest neighbours. Note that 
## this value is expressed in units and it is related to the scale 
## of the mapping coordinates. If the cordinates are expressed in 
## tens (e.g. coordinates used in the matlab version of the NeuCube), 
## then this value should be multiplied by ten (e.g. 25).
## Value: [1, -]
smallWorldRadius=2.5
## Key: smallWorldPossitiveRate
## Description: Set the rate of excitatory connections.
## Value: (0,1]
smallWorldPossitiveRate=0.7

### Set the EPUSSS SMALL WORLD vairables.
## 
## Key: epussSmallWorldRadius 
## Description:  Set the radius of the nearest neighbours. Note that
## this value is expressed in units and it is related to the scale 
## of the mapping coordinates. If the cordinates are expressed in 
## tens (e.g. coordinates used in the matlab version of the NeuCube), 
## then this value should be multiplied by ten (e.g. 25).
## Value: [1, -]
epussSmallWorldRadius=2.5
## Key: epussSmallWorldPossitiveRate
## Description: Set the rate of excitatory connections.
## Value: (0,1]
epussSmallWorldPossitiveRate=0.7
## Key: epussSmallWorldBias
## Description: Set the bias value for the connection between the 
## input node and the input neuron.
## Value: Higher thant the treshold value of the input neuron.
epussSmallWorldBias=0.9


####################################################################
##                      UNSUPERVISED TRAINING                     ##
####################################################################
## Set the unsupervised learning algorithm properties.
## Key: unsupervisedLearningAlgorithmName
## Description: Set the unsupervised algorithm
## Value: STDP (Spike-timing-dependent plasticity), STDP_DELAYS (STDP
## with synaptic delays), ONLINE_STDP (STDP for online mode), STDP_MATLAB
## (the Matlab implemenbtation of a STDP rule), EPUSSS
## (Evolving Predictive Unsupervised/Supervised Spike Sequences), 
## NRDP (Neuroreceptor-dependent plasticity)
unsupervisedLearningAlgorithmName=STDP
## Key: trainingRounds
## Description: Set the number of training rounds (learning 
## iterations).
## Value: [1, ]
trainingRounds=1
## Key: savingWeightMode
## Description: Describes whether the network should save all the 
## weigths at every stimulation time or not. This is for analysing 
## the evolution of the unsupervised learning.
## Value: true, false
savingWeightMode=false

### Set the STDP variables. 
## Key: tauPos
## Description: Set the time window that describes the range
## of spike interval over which the STDP occurs for POSITIVE 
## modifications. 
## Value: Depends on the resolution of the temporal data.
tauPos = 10
## Key: tauNeg
## Description: Set the time window that describes the range of 
## spike interval over which the STDP occurs for NEGATIVE 
## modifications. 
## Value: Depends on the resolution of the temporal data.
tauNeg = 10
## Key: Apos
## Description: Set the positive synaptic modifications.
## Value: 0.001
Apos = 0.001
## Key: Aneg
## Description: Set the negative synaptic modifications.
## Value: 0.001
Aneg = 0.001
## Key: saveWeights
## Description: Describes whether the network should save all the 
## weigths at every stimulation time or not. This is for analysing 
## the evolution of the unsupervised learning.
## Value: true, false
saveWeights = false
## Key: upperBound
## Description: Set the maximum synaptic weight value.
## Value: Real number
upperBound = 2
## Key: lowerBound
## Description: Set the minimum synaptic weight value.
## Value: Real number
lowerBound = -2

### Set the STDP_MATLAB variables. 
## Key: Learning rate
## Description: The weight gain or lose that depends on the time 
## difference between the postsynaptic and presynaptic neuorns'
## firing times.
## Value: 0.001
learningRate = 0.001
## Key: upperBound
## Description: Set the maximum synaptic weight value.
## Value: Real number
upperBound = 2
## Key: lowerBound
## Description: Set the minimum synaptic weight value.
## Value: Real number
lowerBound = -2

### Set the EPUSSS varibles
## Key: epusssAlpha
## Description: Set the learning rate
## Value: Real number
epusssAlpha = 0.1
## Key: epusssDeltaAlpha
## Description: Set the increament or decrease learning rate by deltaAlpha.
## Value: Real number
epusssDeltaAlpha = 0.01
## Key: epusssAlphaMax
## Description: Set the maximum value of the learning rate alpha.
## Value: Real number
epusssAlphaMax = 1
## Key: epusssAlphaMin
## Description: Set the minimum value of the learning rate alpha.
## Value: Real number
epusssAlphaMin = 0.0
## Key: epusssNumDeepLayers
## Description: Set the number of layers to correct the weigths.
## Value: (1, ]
epusssNumDeepLayers = 2
## Key: epusssStepAhead
## Description: Set the number of steps ahead to predict.
## Value: [1, ]
epusssStepAhead = 1

####################################################################
##                       SUPERVISED TRAINING                      ##
####################################################################
### Set the supervised learning algorithm variables.
## Key: supervisedLearningAlgorithmName
## Description: Set the supervise learning algorithm.
## Value: DE_SNN_S (dynamic evolving spiking neural network using the
## spiking activity of the reservoir), DE_SNN_ADAPTIVE (adaptive deSNN).
supervisedLearningAlgorithmName=DE_SNN_S
### Set the deSNN varibles. 
## Key: positiveDrift
## Description: Set the positive drift value (increment after each spike).
## Value: Real number
positiveDrift = 0.005
## Key: negativeDrift
## Description: Set the negative drift value (decrease if no spike).
## Value: Real number
negativeDrift = 0.005
## Key: mod 
## Description: Set the modulation factor, that defines how important 
## the order of the first spike is mod=[0,1].
## Value: (0,1)
mod = 0.8
## Key: deSnnAlpha
## Description: Set the alpha variable of the deSNNs.
## Value: 1.0
deSnnAlpha = 1.0

####################################################################
##                           CLASSIFIERS                          ##
####################################################################
### Set the configuration of the classifiers.
## Key: classifierName
## Description: Set the classifier.
## Value: KNN (k-nearest neighbours), WKNN (weighted k-nearest 
## neighbours).
classifierName=KNN
## Key: knnK
## Description: Set the number of nearest neighbours.
## Value: [1, ]
knnK=3
## Key: classifierDistance
## Description: Set the distances to calculate the nearest neighbours
## Value: EUCLIDIAN, GAUSSIAN
classifierDistance=EUCLIDIAN
    
####################################################################
##                    CROSS VALIDATION METHODS                    ##
####################################################################
### Set the configuration of the cross validation methods. 
## Key: crossValidationMethodName
## Description: Set the cross validation method
## Value: K_FOLD, MONTE_CARLO.
crossValidationMethodName=K_FOLD
### Set the K-fold properties.
## Key: numFolds
## Description: Set the number of folds.
## Value: [5, 10]
numFolds=5
### Set the Monte Carlo method properties.
## Key: trainingRate
## Description: Set the percetnage of data for training.
## Value: (0,1)
trainingRate = 0.7
## Key: numExperiments
## Description: Set the number of experiments to perform.
## Value: For statistical significance 30 experiment at least
numExperiments = 1
## Set the order of the training samples .
## Key: monteCarloType
## Description: Set the order of the training samples
## Value: RANDOM, SEQUENTIAL (for regression)
monteCarloType = RANDOM

